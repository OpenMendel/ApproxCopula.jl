var documenterSearchIndex = {"docs":
[{"location":"man/VC_Examples/#VC-Covariance","page":"VC Covariance","title":"VC Covariance","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"In this notebook we will demonstrate how to fit a variance component model (VCM) with Poisson base on the Mmmec dataset from the mlmRev R package. We will access the data using the RDatasets Julia package. ","category":"page"},{"location":"man/VC_Examples/#Table-of-Contents:","page":"VC Covariance","title":"Table of Contents:","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Example 1: Intercept Only Random Intercept Model\nExample 2: Random Intercept Model with Covariates\nExample 2: Multiple VC Model with Covariates","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"For these examples, we have n independent clusters indexed by i. ","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Under the VC parameterization of the covariance matrix, the i^th cluster with cluster size d_i, has covariance matrix mathbfGamma_i that takes the form: ","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"mathbfGamma_i(boldsymboltheta) = sum_k = 1^m theta_k * mathbfV_ik","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"where m is the number of variance components, which are arranged in a vector boldsymboltheta = theta_1  theta_m  for estimation\nand mathbfV_ik k in 1 m are symmetric, positive semi-definite matrices of dimension d_i times d_i provided by the user.","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"versioninfo()","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Julia Version 1.6.2\nCommit 1b93d53fc4 (2021-07-14 15:36 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.7.0)\n  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"using DataFrames, QuasiCopula, LinearAlgebra, GLM, RDatasets","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Mmmec = dataset(\"mlmRev\", \"Mmmec\");","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Let's take a preview of the first 20 lines of the Mmmec dataset.","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"@show Mmmec[1:20, :];","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Mmmec[1:20, :] = 20×6 DataFrame\n Row │ Nation     Region  County  Deaths  Expected  UVB\n     │ Cat…       Cat…    Cat…    Int32   Float64   Float64\n─────┼──────────────────────────────────────────────────────\n   1 │ Belgium    1       1           79   51.222   -2.9057\n   2 │ Belgium    2       2           80   79.956   -3.2075\n   3 │ Belgium    2       3           51   46.5169  -2.8038\n   4 │ Belgium    2       4           43   55.053   -3.0069\n   5 │ Belgium    2       5           89   67.758   -3.0069\n   6 │ Belgium    2       6           19   35.976   -3.4175\n   7 │ Belgium    3       7           19   13.28    -2.6671\n   8 │ Belgium    3       8           15   66.5579  -2.6671\n   9 │ Belgium    3       9           33   50.969   -3.1222\n  10 │ Belgium    3       10           9   11.171   -2.4852\n  11 │ Belgium    3       11          12   19.683   -2.5293\n  12 │ W.Germany  4       12         156  108.04    -1.1375\n  13 │ W.Germany  4       13         110   73.692   -1.3977\n  14 │ W.Germany  4       14          77   57.098   -0.4386\n  15 │ W.Germany  4       15          56   46.622   -1.0249\n  16 │ W.Germany  5       16         220  112.61    -0.5033\n  17 │ W.Germany  5       17          46   30.334   -1.4609\n  18 │ W.Germany  5       18          47   29.973   -1.8956\n  19 │ W.Germany  5       19          50   32.027   -2.5541\n  20 │ W.Germany  5       20          90   46.521   -1.9671","category":"page"},{"location":"man/VC_Examples/#Forming-the-Models","page":"VC Covariance","title":"Forming the Models","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"We can form the VC models for regression with following arguments:","category":"page"},{"location":"man/VC_Examples/#Arguments","page":"VC Covariance","title":"Arguments","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"df: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nV: Vector of Vector of Positive Semi-Definite (PSD) Covariance Matrices. V is of length n, where n is the number of groups/clusters.   Each element of V is also a Vector, but of length m. Here m is the number of variance components.   Each element of V is a Vector of di x di PSD covariance matrices under the VCM framework,   where d_i is the cluster size of the ith cluster, which may vary for each cluster of observations i in [1, n].   Each of these dimensions must match that specified in df.\nd: Base Distribution of outcome from Distributions.jl.","category":"page"},{"location":"man/VC_Examples/#Example-1:-Intercept-Only-Random-Intercept-Model","page":"VC Covariance","title":"Example 1: Intercept Only Random Intercept Model","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"We first demonstrate how to form the intercept only random intercept model with Poisson base. ","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"We can form the random intercept VC model with intercept only by excluding the covariates and V arguments. ","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"By default, the VC_model function will construct a random intercept model using a single variance component. That is, it will parameterize boldsymbolGamma_i(boldsymboltheta) for each cluster i with cluster size d_i as follows:","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"mathbfGamma_i(boldsymboltheta) = theta_1 * mathbf1_d_i mathbf1_d_i^t","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"df = Mmmec\ny = :Deaths\ngrouping = :Region\nd = Poisson()\nlink = LogLink()\n\nPoisson_VC_model = VC_model(df, y, grouping, d, link)","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Quasi-Copula Variance Component Model\n  * base distribution: Poisson\n  * link function: LogLink\n  * number of clusters: 78\n  * cluster size min, max: 1, 13\n  * number of variance components: 1\n  * number of fixed effects: 1","category":"page"},{"location":"man/VC_Examples/#Example-2:-Random-Intercept-Model-with-Covariates","page":"VC Covariance","title":"Example 2: Random Intercept Model with Covariates","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"We can form the random intercept model with covariates by including the covariates argument to the model in Example 1.","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"covariates = [:UVB]\n\nPoisson_VC_model = VC_model(df, y, grouping, covariates, d, link)","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Quasi-Copula Variance Component Model\n  * base distribution: Poisson\n  * link function: LogLink\n  * number of clusters: 78\n  * cluster size min, max: 1, 13\n  * number of variance components: 1\n  * number of fixed effects: 2","category":"page"},{"location":"man/VC_Examples/#Example-3:-Multiple-VC-Model-with-Covariates","page":"VC Covariance","title":"Example 3: Multiple VC Model with Covariates","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Next we demonstrate how to form the model with Poisson base and two variance components.","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"To specify our own positive semi-definite covariance matrices, V_i = [V_i1, V_i2], we need to make sure the dimensions match that of each cluster size d_i, for each independent cluster i in 1 n. ","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"To illustrate, we will add an additional variance component proportional to the Identity matrix to the random intercept model above to help capture overdispersion. More explicitly, I will make mathbfV_i1 = mathbf1_d_i mathbf1_d_i^t and mathbfV_i2 = mathbfI_d_i to parameterize mathbfGamma_i(boldsymboltheta) follows:","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"mathbfGamma_i(boldsymboltheta) = theta_1 * mathbf1_d_i mathbf1_d_i^t + theta_2 * mathbfI_d_i","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"function make_Vs(\n    df::DataFrame,\n    y::Symbol,\n    grouping::Symbol)\n    groups = unique(df[!, grouping])\n    n = length(groups)\n    V = Vector{Vector{Matrix{Float64}}}(undef, n)\n    for (i, grp) in enumerate(groups)\n        gidx = df[!, grouping] .== grp\n        ni = count(gidx)\n        V[i] = [ones(ni, ni), Matrix(I, ni, ni)]\n    end\n    V\nend\n\nV = make_Vs(df, y, grouping);","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Poisson_VC_model = VC_model(df, y, grouping, covariates, V, d, link)","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Quasi-Copula Variance Component Model\n  * base distribution: Poisson\n  * link function: LogLink\n  * number of clusters: 78\n  * cluster size min, max: 1, 13\n  * number of variance components: 2\n  * number of fixed effects: 2","category":"page"},{"location":"man/VC_Examples/#Fitting-the-model","page":"VC Covariance","title":"Fitting the model","text":"","category":"section"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"By default, we limit the maximum number of Quasi-Newton iterations to 100, and set the convergence tolerance to 10^-6 ","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"QuasiCopula.fit!(Poisson_VC_model);","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"initializing β using Newton's Algorithm under Independence Assumption\ngcm.β = [3.25512456536309, -0.07968965522100831]\ninitializing variance components using MM-Algorithm\ngcm.θ = [1.0, 1.0]\n\n******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit https://github.com/coin-or/Ipopt\n******************************************************************************\n\nTotal number of variables............................:        4\n                     variables with only lower bounds:        2\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\n\nNumber of Iterations....: 73\n\n                                   (scaled)                 (unscaled)\nObjective...............:   1.8794436356381009e+03    5.8110834763467265e+03\nDual infeasibility......:   2.0173863100686985e-07    6.2375907580054106e-07\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   9.9999999999999978e-12    3.0919168663303757e-11\nOverall NLP error.......:   2.0173863100686985e-07    6.2375907580054106e-07\n\n\nNumber of objective function evaluations             = 274\nNumber of objective gradient evaluations             = 74\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 0\nTotal CPU secs in IPOPT (w/o function evaluations)   =      2.771\nTotal CPU secs in NLP function evaluations           =      0.036\n\nEXIT: Optimal Solution Found.","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"We can take a look at the MLE's","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"@show Poisson_VC_model.β\n@show Poisson_VC_model.θ;","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Poisson_VC_model.β = [3.267366389079128, -0.07503868222380021]\nPoisson_VC_model.θ = [14855.181986628666, 5411.298363976766]","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Calculate the loglikelihood at the maximum","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"logl(Poisson_VC_model)","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"-5811.0834763467265","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"Get asymptotic confidence intervals at the MLE's","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"get_CI(Poisson_VC_model)","category":"page"},{"location":"man/VC_Examples/","page":"VC Covariance","title":"VC Covariance","text":"4×2 Matrix{Float64}:\n  3.09211     3.44262\n -0.111956   -0.0381218\n -9.59795e5   9.89505e5\n -3.52785e5   3.63607e5","category":"page"},{"location":"man/AR_Examples/#Autoregressive-AR(1)-Covariance","page":"AR(1) Covariance","title":"Autoregressive AR(1) Covariance","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"In this notebook we will show how to form the quasi-copula model with Poisson base distribution, Log Link function and autoregressive AR(1) structured covariance on the epilepsy dataset provided in the gcmr R package. ","category":"page"},{"location":"man/AR_Examples/#Table-of-Contents:","page":"AR(1) Covariance","title":"Table of Contents:","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Example 1: Intercept Only AR(1) Model\nExample 2: AR(1) Model with Covariates\nExample 3: AR(1) Model with Covariates + L2 Penalty (optional)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"For these examples, we have n independent clusters indexed by i. ","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Under the AR(1) parameterization of the covariance matrix, the i^th cluster with cluster size d_i, has covariance matrix mathbfGamma_i that takes the form: ","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"mathbfGamma_i(rho sigma^2) = sigma^2 times leftbeginarrayccccccc\n1  rho  rho^2  rho^3    rho^d_i - 1\n rho  1  rho  rho^2   \n         rho  1  rho \n rho^d_i - 1  rho^d_i - 2   rho^2  rho  1\nendarrayright","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"versioninfo()","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Julia Version 1.6.2\nCommit 1b93d53fc4 (2021-07-14 15:36 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.7.0)\n  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"using DataFrames, QuasiCopula, LinearAlgebra, GLM, RCall","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"R\"\"\"\n    library(\"gcmr\")\n    data(\"epilepsy\", package = \"gcmr\")\n\"\"\"\n@rget epilepsy;","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"┌ Warning: RCall.jl: Warning: package ‘gcmr’ was built under R version 4.0.2\n└ @ RCall /Users/sarahji/.julia/packages/RCall/6kphM/src/io.jl:172","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Let's take a preview of the first 10 lines of the epilepsy dataset.","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"@show epilepsy[1:10, :];","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"epilepsy[1:10, :] = 10×6 DataFrame\n Row │ id     age    trt    counts  time     visit\n     │ Int64  Int64  Int64  Int64   Float64  Float64\n─────┼───────────────────────────────────────────────\n   1 │     1     31      0      11      8.0      0.0\n   2 │     1     31      0       5      2.0      1.0\n   3 │     1     31      0       3      2.0      1.0\n   4 │     1     31      0       3      2.0      1.0\n   5 │     1     31      0       3      2.0      1.0\n   6 │     2     30      0      11      8.0      0.0\n   7 │     2     30      0       3      2.0      1.0\n   8 │     2     30      0       5      2.0      1.0\n   9 │     2     30      0       3      2.0      1.0\n  10 │     2     30      0       3      2.0      1.0","category":"page"},{"location":"man/AR_Examples/#Forming-the-Models","page":"AR(1) Covariance","title":"Forming the Models","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"We can form the AR(1) models for regression with following arguments:","category":"page"},{"location":"man/AR_Examples/#Arguments","page":"AR(1) Covariance","title":"Arguments","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"df: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.","category":"page"},{"location":"man/AR_Examples/#Optional-Arguments","page":"AR(1) Covariance","title":"Optional Arguments","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"penalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance parameter for the AR(1) structured covariance.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).","category":"page"},{"location":"man/AR_Examples/#Example-1:-Intercept-Only-AR(1)-Model","page":"AR(1) Covariance","title":"Example 1: Intercept Only AR(1) Model","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"We can form the AR(1) model with intercept only by excluding the covariates argument.","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"df = epilepsy\ny = :counts\ngrouping = :id\nd = Poisson()\nlink = LogLink()\n\nPoisson_AR_model = AR_model(df, y, grouping, d, link)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Quasi-Copula Autoregressive AR(1) Model\n  * base distribution: Poisson\n  * link function: LogLink\n  * number of clusters: 59\n  * cluster size min, max: 5, 5\n  * number of fixed effects: 1","category":"page"},{"location":"man/AR_Examples/#Example-2:-AR(1)-Model-with-Covariates","page":"AR(1) Covariance","title":"Example 2: AR(1) Model with Covariates","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"We can form the AR(1) model with covariates by including the covariates argument.","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"covariates = [:visit, :trt]\n\nPoisson_AR_model = AR_model(df, y, grouping, covariates, d, link)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Quasi-Copula Autoregressive AR(1) Model\n  * base distribution: Poisson\n  * link function: LogLink\n  * number of clusters: 59\n  * cluster size min, max: 5, 5\n  * number of fixed effects: 3","category":"page"},{"location":"man/AR_Examples/#Example-3:-AR(1)-Model-with-Covariates-L2-penalty-(optional)","page":"AR(1) Covariance","title":"Example 3: AR(1) Model with Covariates + L2 penalty (optional)","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"We can form the same AR(1) model from Example 2 with the optional argument for adding the L2 penalty on the variance parameter in the AR(1) parameterization of Gamma","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Poisson_AR_model = AR_model(df, y, grouping, covariates, d, link; penalized = true)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Quasi-Copula Autoregressive AR(1) Model\n  * base distribution: Poisson\n  * link function: LogLink\n  * number of clusters: 59\n  * cluster size min, max: 5, 5\n  * number of fixed effects: 3\n  * L2 ridge penalty on AR(1) variance parameter: true","category":"page"},{"location":"man/AR_Examples/#Fitting-the-model","page":"AR(1) Covariance","title":"Fitting the model","text":"","category":"section"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Let's show how to fit the model on the model from Example 3. By default, we limit the maximum number of Quasi-Newton iterations to 100, and set the convergence tolerance to 10^-6 ","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"QuasiCopula.fit!(Poisson_AR_model);","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"initializing β using Newton's Algorithm under Independence Assumption\ninitializing variance components using MM-Algorithm\n\n******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit https://github.com/coin-or/Ipopt\n******************************************************************************\n\nTotal number of variables............................:        5\n                     variables with only lower bounds:        1\n                variables with lower and upper bounds:        1\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\n\nNumber of Iterations....: 18\n\n                                   (scaled)                 (unscaled)\nObjective...............:   5.2073621039210650e+02    2.1964303421468812e+03\nDual infeasibility......:   2.3821081107655573e-08    1.0047571934396371e-07\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   1.0000000000000001e-11    4.2179328003577902e-11\nOverall NLP error.......:   2.3821081107655573e-08    1.0047571934396371e-07\n\n\nNumber of objective function evaluations             = 24\nNumber of objective gradient evaluations             = 19\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 0\nTotal CPU secs in IPOPT (w/o function evaluations)   =      3.177\nTotal CPU secs in NLP function evaluations           =      0.009\n\nEXIT: Optimal Solution Found.","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"We can take a look at the MLE's","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"@show Poisson_AR_model.β\n@show Poisson_AR_model.σ2\n@show Poisson_AR_model.ρ;","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Poisson_AR_model.β = [3.474475582753216, -1.323384706329884, -0.04366460297735922]\nPoisson_AR_model.σ2 = [0.5348860843799086]\nPoisson_AR_model.ρ = [1.0]","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Calculate the loglikelihood at the maximum","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"logl(Poisson_AR_model)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"-2196.4303424825557","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"Get asymptotic confidence intervals at the MLE's","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"get_CI(Poisson_AR_model)","category":"page"},{"location":"man/AR_Examples/","page":"AR(1) Covariance","title":"AR(1) Covariance","text":"5×2 Matrix{Float64}:\n  3.34736    3.60159\n -1.49822   -1.14855\n -0.489077   0.401748\n  0.871632   1.12837\n  0.461106   0.608666","category":"page"},{"location":"#QuasiCopula.jl","page":"Home","title":"QuasiCopula.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Authors: Sarah Ji, Kenneth Lange, Hua Zhou, Janet Sinsheimer, Benjamin Chu","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Flexible Quasi-Copula Distribution for Statistical Modeling","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download and install Julia. Within Julia, copy and paste the following: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add https://github.com/OpenMendel/QuasiCopula.jl.git\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package supports Julia v1.6+.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\"\n    \"man/api.md\"\n    \"man/AR_Examples.md\"\n    \"man/CS_Examples.md\"\n    \"man/VC_Examples.md\"\n]\nDepth = 2","category":"page"},{"location":"man/CS_Examples/#Compound-Symmetric-(CS)-Covariance","page":"CS Covariance","title":"Compound Symmetric (CS) Covariance","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"In this notebook we will show how to form the quasi-copula model with Bernoulli base distribution, Logit Link function and compound symmetric (CS) structured covariance on the respiratory dataset provided in the geepack R package. ","category":"page"},{"location":"man/CS_Examples/#Table-of-Contents:","page":"CS Covariance","title":"Table of Contents:","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Example 1: Intercept Only CS Model\nExample 2: CS Model with Covariates\nExample 3: CS Model with Covariates + L2 Penalty (optional)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"For these examples, we have n independent clusters indexed by i. ","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Under the CS parameterization of the covariance matrix, the i^th cluster with cluster size d_i, has covariance matrix mathbfGamma_i that takes the form: ","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"mathbfGamma_i(rho sigma^2) =  sigma^2 * Big rho * mathbf1_d_i mathbf1_d_i^t + (1 - rho) * mathbfI_d_i Big","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"versioninfo()","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Julia Version 1.6.2\nCommit 1b93d53fc4 (2021-07-14 15:36 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.7.0)\n  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"using DataFrames, QuasiCopula, LinearAlgebra, GLM, RCall","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"R\"\"\"\n    data(respiratory, package=\"geepack\")\n    respiratory_df <- respiratory[order(respiratory$id),]\n\"\"\"\n\n@rget respiratory_df;","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Let's take a preview of the first 10 lines of the respiratory dataset in long format.","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"@show respiratory_df[1:10, :];","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"respiratory_df[1:10, :] = 10×8 DataFrame\n Row │ center  id     treat  sex   age    baseline  visit  outcome\n     │ Int64   Int64  Cat…   Cat…  Int64  Int64     Int64  Int64\n─────┼─────────────────────────────────────────────────────────────\n   1 │      1      1  P      M        46         0      1        0\n   2 │      1      1  P      M        46         0      2        0\n   3 │      1      1  P      M        46         0      3        0\n   4 │      1      1  P      M        46         0      4        0\n   5 │      2      1  P      F        39         0      1        0\n   6 │      2      1  P      F        39         0      2        0\n   7 │      2      1  P      F        39         0      3        0\n   8 │      2      1  P      F        39         0      4        0\n   9 │      1      2  P      M        28         0      1        0\n  10 │      1      2  P      M        28         0      2        0","category":"page"},{"location":"man/CS_Examples/#Forming-the-Models","page":"CS Covariance","title":"Forming the Models","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"We can form the CS model for regression with following arguments:","category":"page"},{"location":"man/CS_Examples/#Arguments","page":"CS Covariance","title":"Arguments","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"df: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.","category":"page"},{"location":"man/CS_Examples/#Optional-Arguments","page":"CS Covariance","title":"Optional Arguments","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"penalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance parameter for the AR(1) structured covariance.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).","category":"page"},{"location":"man/CS_Examples/#Example-1:-Intercept-Only-CS-Model","page":"CS Covariance","title":"Example 1: Intercept Only CS Model","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"We can form the CS model with intercept only by excluding the covariates argument.","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"df = respiratory_df\ny = :outcome\ngrouping = :id\nd = Bernoulli()\nlink = LogitLink()\n\nBernoulli_CS_model = CS_model(df, y, grouping, d, link)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Quasi-Copula Compound Symmetric CS Model\n  * base distribution: Bernoulli\n  * link function: LogitLink\n  * number of clusters: 56\n  * cluster size min, max: 4, 8\n  * number of fixed effects: 1","category":"page"},{"location":"man/CS_Examples/#Example-2:-CS-Model-with-Covariates","page":"CS Covariance","title":"Example 2: CS Model with Covariates","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"We can form the CS model with covariates by including the covariates argument.","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"covariates = [:center, :age, :baseline]\n\nBernoulli_CS_model = CS_model(df, y, grouping, covariates, d, link)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Quasi-Copula Compound Symmetric CS Model\n  * base distribution: Bernoulli\n  * link function: LogitLink\n  * number of clusters: 56\n  * cluster size min, max: 4, 8\n  * number of fixed effects: 4","category":"page"},{"location":"man/CS_Examples/#Example-3:-CS-Model-with-Covariates-L2-penalty-(optional)","page":"CS Covariance","title":"Example 3: CS Model with Covariates + L2 penalty (optional)","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"We can form the same CS model from Example 2 with the optional argument for adding the L2 penalty on the variance parameter in the CS parameterization of Gamma.","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Bernoulli_CS_model = CS_model(df, y, grouping, covariates, d, link; penalized = true)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Quasi-Copula Compound Symmetric CS Model\n  * base distribution: Bernoulli\n  * link function: LogitLink\n  * number of clusters: 56\n  * cluster size min, max: 4, 8\n  * number of fixed effects: 4\n  * L2 ridge penalty on CS variance parameter: true","category":"page"},{"location":"man/CS_Examples/#Fitting-the-model","page":"CS Covariance","title":"Fitting the model","text":"","category":"section"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Let's show how to fit the model on the model from example 3. By default, we limit the maximum number of Quasi-Newton iterations to 100, and set the convergence tolerance to 10^-6 ","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"QuasiCopula.fit!(Bernoulli_CS_model);","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"initializing β using Newton's Algorithm under Independence Assumption\n\n******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit https://github.com/coin-or/Ipopt\n******************************************************************************\n\nTotal number of variables............................:        6\n                     variables with only lower bounds:        1\n                variables with lower and upper bounds:        1\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\n\nNumber of Iterations....: 23\n\n                                   (scaled)                 (unscaled)\nObjective...............:   2.5027875108223640e+02    2.5027875108223640e+02\nDual infeasibility......:   4.5418531868790524e-07    4.5418531868790524e-07\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   1.0000038536138807e-11    1.0000038536138807e-11\nOverall NLP error.......:   4.5418531868790524e-07    4.5418531868790524e-07\n\n\nNumber of objective function evaluations             = 39\nNumber of objective gradient evaluations             = 24\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 0\nTotal CPU secs in IPOPT (w/o function evaluations)   =     12.516\nTotal CPU secs in NLP function evaluations           =      0.010\n\nEXIT: Optimal Solution Found.","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"We can take a look at the MLE's","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"@show Bernoulli_CS_model.β\n@show Bernoulli_CS_model.σ2\n@show Bernoulli_CS_model.ρ;","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Bernoulli_CS_model.β = [-0.834645421736292, 0.8091668556560436, -0.024759691500116324, 1.9286662077720407]\nBernoulli_CS_model.σ2 = [0.1703805055662562]\nBernoulli_CS_model.ρ = [1.0]","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Calculate the loglikelihood at the maximum","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"logl(Bernoulli_CS_model)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"-250.2787511004698","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"Get asymptotic confidence intervals at the MLE's","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"get_CI(Bernoulli_CS_model)","category":"page"},{"location":"man/CS_Examples/","page":"CS Covariance","title":"CS Covariance","text":"6×2 Matrix{Float64}:\n -1.07019    -0.599097\n  0.771294    0.847039\n -0.0339459  -0.0155735\n  1.81842     2.03892\n  0.46641     1.53359\n -0.743613    1.08437","category":"page"},{"location":"man/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Documentation for QuasiCopua.jl's functions.","category":"page"},{"location":"man/api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"man/api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"fit!\nlogl\nget_CI","category":"page"},{"location":"man/api/#QuasiCopula.fit!","page":"API","title":"QuasiCopula.fit!","text":"fit!(gcm::GLMCopulaARModel, solver=Ipopt.IpoptSolver)\n\nFit an GLMCopulaARModel object by MLE using a nonlinear programming solver. This is for Poisson and Bernoulli base distributions with no additional base distribution parameters than the mean. Start point should be provided in gcm.β, gcm.ρ, gcm.σ2.\n\nArguments\n\ngcm: A GLMCopulaARModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level=3, max_iter = 100, tol = 10^-6, limited_memory_max_history = 20, hessian_approximation = \"limited-memory\"))\n\n\n\n\n\nfit!(gcm::GLMCopulaCSModel, solver=Ipopt.IpoptSolver)\n\nFit an GLMCopulaCSModel object by MLE using a nonlinear programming solver. This is for Poisson and Bernoulli base distributions with no additional base distribution parameters than the mean. Start point should be provided in gcm.β, gcm.ρ, gcm.σ2.\n\nArguments\n\ngcm: A GLMCopulaCSModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level=3, max_iter = 100, tol = 10^-6, limited_memory_max_history = 20, hessian_approximation = \"limited-memory\"))\n\n\n\n\n\nfit!(gcm::Union{GaussianCopulaARModel, GaussianCopulaCSModel}, solver=Ipopt.IpoptSolver)\n\nFit a GaussianCopulaARModel or GaussianCopulaCSModel object by MLE using a nonlinear programming solver. Start point should be provided in gcm.β, gcm.τ, gcm.ρ, gcm.σ2.\n\nArguments\n\ngcm: A GaussianCopulaARModel or GaussianCopulaCSModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level=3, max_iter = 100, tol = 10^-6, limited_memory_max_history = 20, hessian_approximation = \"limited-memory\"))\n\n\n\n\n\nfit!(gcm::Union{GLMCopulaVCModel, Poisson_Bernoulli_VCModel}, solver=Ipopt.IpoptSolver(print_level=5))\n\nFit a GLMCopulaVCModel or Poisson_Bernoulli_VCModel model object by MLE using a nonlinear programming solver. This is for Poisson and Bernoulli base distributions or a mixture of the two with no additional base distribution parameters than the mean. Start point should be provided in gcm.β, gcm.θ.\n\nArguments\n\ngcm: A GLMCopulaVCModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level=3, max_iter = 100, tol = 10^-6, limited_memory_max_history = 20, hessian_approximation = \"limited-memory\"))\n\n\n\n\n\nfit!(gcm::NBCopulaVCModel, solver=Ipopt.IpoptSolver)\n\nFit an NBCopulaVCModel object by block MLE using a nonlinear programming solver. Start point should be provided in gcm.β, gcm.θ, gcm.r. In our block updates, we fit 15 iterations of gcm.β, gcm.θ using IPOPT, followed by 10 iterations of Newton on nuisance parameter gcm.r. Convergence is declared when difference of successive loglikelihood is less than tol.\n\nArguments\n\ngcm: A NBCopulaVCModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level = 0, max_iter = 15, limited_memory_max_history = 20,                           warm_start_init_point = \"yes\",  mu_strategy = \"adaptive\",                           hessian_approximation = \"limited-memory\"))\n\nOptional Arguments\n\ntol: Convergence tolerance for the max block iter updates (default tol = 1e-6).\nmaxBlockIter: Number of maximum block iterations to update gcm.β, gcm.θ and  gcm.r (default maxBlockIter = 10).\n\n\n\n\n\nfit!(gcm::NBCopulaARModel, solver=Ipopt.IpoptSolver)\n\nFit an NBCopulaARModel object by block MLE using a nonlinear programming solver. Start point should be provided in gcm.β, gcm.ρ, gcm.σ2, gcm.r. In our block updates, we fit 15 iterations of gcm.β, gcm.ρ, gcm.σ2 using IPOPT, followed by 10 iterations of Newton on nuisance parameter gcm.r. Convergence is declared when difference of successive loglikelihood is less than tol.\n\nArguments\n\ngcm: A NBCopulaARModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level = 0, max_iter = 15, limited_memory_max_history = 20,                           warm_start_init_point = \"yes\",  mu_strategy = \"adaptive\",                           hessian_approximation = \"limited-memory\"))\n\nOptional Arguments\n\ntol: Convergence tolerance for the max block iter updates (default tol = 1e-6).\nmaxBlockIter: Number of maximum block iterations to update gcm.β, gcm.θ and  gcm.r (default maxBlockIter = 10).\n\n\n\n\n\nfit!(gcm::NBCopulaCSModel, solver=Ipopt.IpoptSolver)\n\nFit an NBCopulaCSModel object by block MLE using a nonlinear programming solver. Start point should be provided in gcm.β, gcm.ρ, gcm.σ2, gcm.r. In our block updates, we fit 15 iterations of gcm.β, gcm.ρ, gcm.σ2 using IPOPT, followed by 10 iterations of Newton on nuisance parameter gcm.r. Convergence is declared when difference of successive loglikelihood is less than tol.\n\nArguments\n\ngcm: A NBCopulaCSModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level = 0, max_iter = 15, limited_memory_max_history = 20,                           warm_start_init_point = \"yes\",  mu_strategy = \"adaptive\",                           hessian_approximation = \"limited-memory\"))\n\nOptional Arguments\n\ntol: Convergence tolerance for the max block iter updates (default tol = 1e-6).\nmaxBlockIter: Number of maximum block iterations to update gcm.β, gcm.θ and  gcm.r (default maxBlockIter = 10).\n\n\n\n\n\nfit_quasi!(gcm::GaussianCopulaVCModel, solver=Ipopt.IpoptSolver)\n\nFit an GaussianCopulaVCModel object by MLE using a nonlinear programming solver. Start point should be provided in gcm.β, gcm.θ, gcm.τ this is for Normal base.\n\nArguments\n\ngcm: A GaussianCopulaVCModel model object.\nsolver: Specified solver to use. By default we use IPOPT with 100 quas-newton iterations with convergence tolerance 10^-6.   (default solver = Ipopt.IpoptSolver(print_level=3, max_iter = 100, tol = 10^-6, limited_memory_max_history = 20, warm_start_init_point=\"yes\", hessian_approximation = \"limited-memory\"))\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuasiCopula.logl","page":"API","title":"QuasiCopula.logl","text":"logl(gcm)\n\nGet the loglikelihood at the given parameters in gcm, at the optimal solution.\n\nArguments\n\ngcm: One of GaussianCopulaVCModel, GaussianCopulaARModel, GaussianCopulaCSModel, GLMCopulaVCModel, GLMCopulaARModel, GLMCopulaCSModel, NBCopulaVCModel, NBCopulaARModel, NBCopulaCSModel or Poisson_Bernoulli_VCModel model objects.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuasiCopula.get_CI","page":"API","title":"QuasiCopula.get_CI","text":"get_CI(gcm)\n\nGet the confidence interval of all parameters, at the optimal solution.\n\nArguments\n\ngcm: One of GaussianCopulaVCModel, GaussianCopulaARModel, GaussianCopulaCSModel, GLMCopulaVCModel, GLMCopulaARModel, GLMCopulaCSModel, NBCopulaVCModel, NBCopulaARModel, NBCopulaCSModel or Poisson_Bernoulli_VCModel model objects.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Models","page":"API","title":"Models","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"AR_model\nCS_model\nVC_model","category":"page"},{"location":"man/api/#QuasiCopula.AR_model","page":"API","title":"QuasiCopula.AR_model","text":"AR_model(df, y, grouping, d, link; penalized = penalized)\n\nForm the autoregressive (AR(1)) model for intercept only regression with the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance parameter for the AR(1) structured covariance.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).\n\n\n\n\n\nAR_model(df, y, grouping, covariates, d, link; penalized = penalized)\n\nForm the autoregressive (AR(1)) model for regression with the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance parameter for the AR(1) structured covariance.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuasiCopula.CS_model","page":"API","title":"QuasiCopula.CS_model","text":"CS_model(df, y, grouping, d, link)\n\nForm the compound symmetric (CS) model for intercept only regression with the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance parameter for the CS structured covariance.   One can turn this option on by specifying penalized = true to add this penalty for numerical stability. (default penalized = false).\n\n\n\n\n\nCS_model(df, y, grouping, covariates, d, link; penalized = penalized)\n\nForm the compound symmetric (CS) model for regression with the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance parameter for the CS structured covariance.   One can turn this option on by specifying penalized = true to add this penalty for numerical stability. (default penalized = false).\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuasiCopula.VC_model","page":"API","title":"QuasiCopula.VC_model","text":"VC_model(df, y, grouping, d, link)\n\nForm the variance component model (VCM) for intercept only regression with a random intercept covariance matrix and the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance components vector.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).\n\n\n\n\n\nVC_model(df, y, grouping, covariates, d, link)\n\nForm the variance component model (VCM) for regression with a random intercept covariance matrix and the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance components vector.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).\n\n\n\n\n\nVC_model(df, y, grouping, covariates, V, d, link)\n\nForm the variance component model (VCM) for intercept only regression with the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\nV: Vector of Vector of Positive Semi-Definite (PSD) Covariance Matrices. V is of length n, where n is the number of groups/clusters.   Each element of V is also a Vector, but of length m. Here m is the number of variance components.   Each element of V is a Vector of di x di PSD covariance matrices under the VCM framework,   where d_i is the cluster size of the ith cluster, which may vary for each cluster of observations i in [1, n].   Each of these dimensions must match that specified in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance components vector.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).\n\n\n\n\n\nVC_model(df, y, grouping, covariates, V, d, link)\n\nForm the variance component model (VCM) for regression with the specified base distribution (d) and link function (link).\n\nArguments\n\ndf: A named DataFrame\ny: Ouctcome variable name of interest, specified as a Symbol.   This variable name must be present in df.\ngrouping: Grouping or Clustering variable name of interest, specified as a Symbol.   This variable name must be present in df.\ncovariates: Covariate names of interest as a vector of Symbols.   Each variable name must be present in df.\nV: Vector of Vector of Positive Semi-Definite (PSD) Covariance Matrices. V is of length n, where n is the number of groups/clusters.   Each element of V is also a Vector, but of length m. Here m is the number of variance components.   Each element of V is a Vector of di x di PSD covariance matrices under the VCM framework,   where d_i is the cluster size of the ith cluster, which may vary for each cluster of observations i in [1, n].   Each of these dimensions must match that specified in df.\nd: Base Distribution of outcome from Distributions.jl.\nlink: Canonical Link function of the base distribution specified in d, from GLM.jl.\n\nOptional Arguments\n\npenalized: Boolean to specify whether or not to add an L2 Ridge penalty on the variance components vector.   One can put true (e.g. penalized = true) to add this penalty for numerical stability (default penalized = false).\n\n\n\n\n\n","category":"function"}]
}
